import 'dart:convert';
import 'dart:io';
import 'package:meta/meta.dart';
import 'package:github/model_helpers.dart';
import 'package:github/model/vulnerability.dart';
import 'package:github/model/vulnerability_package.dart';
import 'package:github/model/security-advisory-ecosystems.dart';
import 'package:github/model/vulnerability.dart';
import 'package:github/model/vulnerability_package.dart';
import 'package:github/model/security-advisory-ecosystems.dart';

@immutable
class Vulnerability {
  Vulnerability({
    required this.package,
    required this.vulnerable_version_range,
    required this.first_patched_version,
    this.vulnerable_functions = const [],
  });

  factory Vulnerability.fromJson(Map<String, dynamic> json) {
    return Vulnerability(
      package: VulnerabilityPackage.fromJson(
        json['package'] as Map<String, dynamic>,
      ),
      vulnerable_version_range: json['vulnerable_version_range'] as String,
      first_patched_version: json['first_patched_version'] as String,
      vulnerable_functions: (json['vulnerable_functions'] as List)
          .cast<String>(),
    );
  }

  /// Convenience to create a nullable type from a nullable json object.
  /// Useful when parsing optional fields.
  static Vulnerability? maybeFromJson(Map<String, dynamic>? json) {
    if (json == null) {
      return null;
    }
    return Vulnerability.fromJson(json);
  }

  final VulnerabilityPackage package;
  final String vulnerable_version_range;
  final String first_patched_version;
  final List<String> vulnerable_functions;

  Map<String, dynamic> toJson() {
    return {
      'package': package.toJson(),
      'vulnerable_version_range': vulnerable_version_range,
      'first_patched_version': first_patched_version,
      'vulnerable_functions': vulnerable_functions,
    };
  }

  @override
  int get hashCode => Object.hash(
    package,
    vulnerable_version_range,
    first_patched_version,
    vulnerable_functions,
  );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Vulnerability &&
        package == other.package &&
        vulnerable_version_range == other.vulnerable_version_range &&
        first_patched_version == other.first_patched_version &&
        listsEqual(vulnerable_functions, other.vulnerable_functions);
  }
}
